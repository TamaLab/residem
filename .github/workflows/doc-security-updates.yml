name: Documentation Security Updates

on:
  # Run weekly to check for vulnerabilities
  schedule:
    - cron: '0 0 * * 1'  # Every Monday
  
  # Manual trigger
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  security-update:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12.5
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.5"
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety
      
      - name: Check for vulnerabilities
        id: check_vulnerabilities
        run: |
          # Check requirements.txt for vulnerabilities
          safety check -r requirements.txt --json > vulnerabilities.json || true
          
          # Determine if vulnerabilities were found
          if [ -s vulnerabilities.json ] && [ "$(cat vulnerabilities.json | grep -c vulnerability)" -gt 0 ]; then
            echo "VULNERABILITIES_FOUND=true" >> $GITHUB_OUTPUT
          else
            echo "VULNERABILITIES_FOUND=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create branch for changes
        if: steps.check_vulnerabilities.outputs.VULNERABILITIES_FOUND == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b docs-security-update-$(date +%Y%m%d)
      
      - name: Update vulnerable packages
        if: steps.check_vulnerabilities.outputs.VULNERABILITIES_FOUND == 'true'
        run: |
          # Extract vulnerable packages and update them
          python -c "
import json
import subprocess
import re

# Load vulnerabilities
with open('vulnerabilities.json', 'r') as f:
    data = json.load(f)

# Extract unique package names
vulnerable_packages = set()
for item in data:
    if 'package_name' in item:
        vulnerable_packages.add(item['package_name'])
    elif 'package' in item:
        vulnerable_packages.add(item['package'])

# Update each vulnerable package
for package in vulnerable_packages:
    print(f'Updating {package}')
    subprocess.run(['pip', 'install', '--upgrade', package])

# Read requirements.txt
with open('requirements.txt', 'r') as f:
    requirements = f.readlines()

# Update requirements.txt with new versions
updated_requirements = []
for line in requirements:
    line = line.strip()
    if not line or line.startswith('#'):
        updated_requirements.append(line)
        continue
    
    # Extract package name
    match = re.match(r'^([a-zA-Z0-9_\-\.]+)([<>=].+)?$', line)
    if match:
        package_name = match.group(1).lower()
        if package_name in vulnerable_packages:
            # Get the installed version
            result = subprocess.run(['pip', 'show', package_name], capture_output=True, text=True)
            version_match = re.search(r'Version: (.+)', result.stdout)
            if version_match:
                new_version = version_match.group(1)
                updated_requirements.append(f'{package_name}=={new_version}')
                continue
    
    # If we got here, just keep the original line
    updated_requirements.append(line)

# Write updated requirements
with open('requirements.txt', 'w') as f:
    for line in updated_requirements:
        f.write(line + '\\n')
          "
      
      - name: Test documentation build
        if: steps.check_vulnerabilities.outputs.VULNERABILITIES_FOUND == 'true'
        id: test_build
        continue-on-error: true
        run: |
          # Install updated dependencies
          pip install -r requirements.txt
          pip install sphinx-rtd-theme
          pip install -e ".[docs]"
          
          # Try to build docs
          cd docs
          make clean
          make html
          
          # Check if build succeeded
          if [ $? -eq 0 ]; then
            echo "BUILD_SUCCESS=true" >> $GITHUB_OUTPUT
          else
            echo "BUILD_SUCCESS=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request
        if: steps.check_vulnerabilities.outputs.VULNERABILITIES_FOUND == 'true' && steps.test_build.outputs.BUILD_SUCCESS == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: Update vulnerable dependencies [skip docs]"
          title: "Documentation: Update vulnerable dependencies"
          body: |
            # Security Update for Documentation Dependencies
            
            This PR automatically updates documentation dependencies to fix security vulnerabilities.
            
            ## Changes
            - Updates vulnerable packages to secure versions
            - Documentation builds successfully with these updates
            
            This PR was automatically generated by the security update workflow.
          branch: docs-security-update-$(date +%Y%m%d)
          labels: documentation,security,dependencies
          delete-branch: true
