name: Documentation Security Updates

permissions:
  contents: write
  pull-requests: write
  security-events: read

on:
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Mondays
  workflow_dispatch:

jobs:
  update-doc-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12.5
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.5"
      
      - name: Install dependency tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install pip-tools safety
      
      - name: Check for vulnerabilities
        id: check
        run: |
          safety check -r requirements.txt --json > safety_report.json || true
          if [ -s safety_report.json ]; then
            echo "VULNERABILITIES_FOUND=true" >> $GITHUB_OUTPUT
            # Extract vulnerable packages
            python -c "
import json
import os
try:
    with open('safety_report.json', 'r') as f:
        data = json.load(f)
        packages = set()
        for vuln in data:
            if 'package_name' in vuln:
                packages.add(vuln['package_name'])
            elif 'package' in vuln:
                packages.add(vuln['package'])
        with open('vulnerable_packages.txt', 'w') as out:
            for pkg in packages:
                out.write(pkg + '\n')
except Exception as e:
    print(f'Error processing safety report: {e}')
    with open('vulnerable_packages.txt', 'w') as out:
        pass
            "
          else
            echo "VULNERABILITIES_FOUND=false" >> $GITHUB_OUTPUT
            touch vulnerable_packages.txt
          fi
      
      - name: Create branch for changes
        if: steps.check.outputs.VULNERABILITIES_FOUND == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b docs-security-update-$(date +%Y%m%d)
      
      - name: Update dependencies
        if: steps.check.outputs.VULNERABILITIES_FOUND == 'true'
        run: |
          # Create a temporary requirements file
          cp requirements.txt requirements.txt.bak
          
          # Update each vulnerable package individually
          if [ -s vulnerable_packages.txt ]; then
            while read package; do
              echo "Updating $package"
              python -m pip install --upgrade $package
            done < vulnerable_packages.txt
          fi
          
          # Generate new requirements file with updated versions
          python -m pip freeze > requirements.txt.new
          
          # Keep only the packages that were in the original requirements.txt
          python -c "
with open('requirements.txt.bak') as orig, open('requirements.txt.new') as new, open('requirements.txt.updated', 'w') as out:
    orig_pkgs = {}
    for line in orig:
        line = line.strip()
        if line and not line.startswith('#'):
            parts = line.split('==', 1)
            if len(parts) > 1:
                orig_pkgs[parts[0].lower()] = line
            else:
                orig_pkgs[line.lower()] = line
    
    for line in new:
        line = line.strip()
        if line and not line.startswith('#'):
            parts = line.split('==', 1)
            if len(parts) > 1:
                pkg_name = parts[0].lower()
                if pkg_name in orig_pkgs:
                    out.write(line + '\n')
            elif line.lower() in orig_pkgs:
                out.write(line + '\n')
          "
          
          # Replace requirements.txt with updated version
          mv requirements.txt.updated requirements.txt
          rm requirements.txt.bak requirements.txt.new
      
      - name: Test documentation build
        if: steps.check.outputs.VULNERABILITIES_FOUND == 'true'
        id: test_build
        continue-on-error: true
        run: |
          pip install -r requirements.txt
          pip install -e ".[docs]"
          cd docs
          make html
          if [ $? -eq 0 ]; then
            echo "BUILD_SUCCESS=true" >> $GITHUB_OUTPUT
          else
            echo "BUILD_SUCCESS=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request
        if: steps.check.outputs.VULNERABILITIES_FOUND == 'true' && steps.test_build.outputs.BUILD_SUCCESS == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: Update documentation dependencies [skip docs]"
          title: "Security: Update documentation dependencies"
          body: |
            # Documentation Security Update
            
            This PR automatically updates documentation dependencies to resolve security vulnerabilities.
            
            ## Changes
            - Updates vulnerable dependencies to secure versions
            - Documentation builds successfully with these updates
          branch: docs-security-update-$(date +%Y%m%d)
          labels: documentation,security,dependencies,automated-pr
          delete-branch: true
